{"version":3,"sources":["utils/calc.js","components/Square/Square.js","components/Board/Board.js","containers/Game/Game.js","App.js","index.js"],"names":["module","exports","calcPosibility","size","winLines","r","rLine","cLine","c","push","calcWinner","player","board","playerSquares","map","square","idx","formatPlayerSquaresStr","filter","join","i","length","line","formatLineStr","includes","Square","props","highLighted","onClick","handleClick","className","value","Board","lineWin","squares","isFinish","boardShape","boardRow","key","require","Game","numSquares","lineWins","state","stepNumber","maxSteps","history","Array","fill","position","xIsNext","isAscending","this","updatedHistory","slice","parseInt","playerTurn","setState","concat","step","current","moves","move","desc","classNames","jumpTo","reverse","status","reverseMoves","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7e27f7e.chunk.js","sourcesContent":["const calcPosibility = (size) => {\n  const winLines = [];\n  for (let r = 0; r < size; r++) {\n    const rLine = [];\n    const cLine = [];\n    for (let c = 0; c < size; c++) {\n      rLine.push((r * size) + c);\n      cLine.push(r + (c * size));\n    }\n    winLines.push(rLine);\n    winLines.push(cLine);\n  }\n  winLines.push([0, 6, 12, 18, 24]);\n  winLines.push([4, 8, 12, 16, 20]);\n\n  return winLines;\n};\n\nconst calcWinner = (winLines, player = 'X', board) => {\n  let playerSquares = board.map((square, idx) => {\n    if (square === player) {\n      return idx;\n    }\n    return null;\n  });\n  playerSquares = playerSquares.filter(square => square !== null);\n  const formatPlayerSquaresStr = playerSquares.join(' ');\n  for (let i = 0; i < winLines.length; i++) {\n    const line = winLines[i];\n    const formatLineStr = line.join(' ');\n    if (formatPlayerSquaresStr.includes(formatLineStr)) {\n      return line;\n    }\n  }\n  return null;\n};\n\nmodule.exports = { calcPosibility, calcWinner };","import React from 'react';\nimport \"./style.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Square = (props) => {\n  const { highLighted } = props;\n  return (\n    <button onClick={props.handleClick} className={`square ${highLighted ? 'high-lighted' : ''}`}>\n      {props.value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  handleClick: PropTypes.func\n};\n\nexport default Square;","import React from 'react';\nimport './style.scss';\n\nimport Square from '../Square';\n\nconst Board = ({ size, lineWin, squares, onClick, isFinish }) => {\n  const boardShape = [];\n  for (let r = 0; r < size; r++) {\n    let boardRow = [];\n    for (let c = 0; c < size; c++) {\n      const idx = (r * size) + c;\n      if (isFinish && lineWin.includes(idx)) {\n        boardRow.push(<Square key={`square-${idx}`} value={squares[idx]} handleClick={() => onClick(idx)} highLighted />);\n        continue;\n      }\n      boardRow.push(<Square key={`square-${idx}`} value={squares[idx]} handleClick={() => onClick(idx)} />);\n    }\n    boardShape.push(<div key={`board-row--${r}`} className=\"board-row\">{boardRow}</div>);\n  }\n\n  return (\n    <div>\n      <div className=\"board-game\">\n        {boardShape}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;","import React, { Component } from 'react';\n\nimport Board from '../../components/Board';\nimport './style.scss';\n\nconst { calcPosibility, calcWinner } = require('../../utils/calc');\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const { size } = this.props;\n    const numSquares = size * size;\n    const lineWins = calcPosibility(size);\n\n    this.state = {\n      lineWins,\n      isFinish: false,\n      stepNumber: 0,\n      maxSteps: numSquares,\n      history: [{\n        squares: Array(numSquares).fill(null),\n        position: { r: -1, c: -1 }\n      }],\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const { history, isFinish, xIsNext, stepNumber, lineWins } = this.state;\n    const { size } = this.props;\n    const updatedHistory = history.slice(0, stepNumber + 1);\n    const current = updatedHistory[updatedHistory.length - 1];\n    const squares = current.squares.slice();\n\n    const r = parseInt((i / size) + 1);\n    const c = (i % size) + 1;\n\n    if (isFinish) {\n      return;\n    }\n    const playerTurn = xIsNext ? 'X' : 'O';\n    if (squares[i]) {\n      return;\n    }\n\n    squares[i] = playerTurn;\n\n    if (calcWinner(lineWins, playerTurn, squares)) {\n      this.setState({\n        isFinish: true,\n        history: updatedHistory.concat([\n          {\n            squares: squares,\n            position: {\n              r, c\n            }\n          }\n        ]),\n        stepNumber: updatedHistory.length\n      });\n      return;\n    }\n    this.setState({\n      history: updatedHistory.concat([\n        {\n          squares: squares,\n          position: {\n            r, c\n          }\n        }\n      ]),\n      xIsNext: !xIsNext,\n      stepNumber: updatedHistory.length\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  reverseMoves() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const { history, lineWins, xIsNext, stepNumber, maxSteps, isFinish, isAscending } = this.state;\n    const { size } = this.props;\n    const playerTurn = xIsNext ? \"X\" : \"O\";\n    const current = history[stepNumber];\n\n    const lineWin = calcWinner(lineWins, playerTurn, current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move # ' + move + ` with row: ${step.position.r}, col: ${step.position.c}` :\n        'Go to Game Start';\n      const classNames = stepNumber === move ? 'bold' : '';\n      return (\n        <li key={move}>\n          <button className={classNames} onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    let status = 'Next player: ' + playerTurn;\n    if (stepNumber === maxSteps) {\n      status = \"Draw-No One Win this game\";\n    }\n    if (lineWin) {\n      status = \"Winner: \" + playerTurn;\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            size={size}\n            lineWin={lineWin}\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            isFinish={isFinish}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"status\">{status}</div>\n          <button onClick={() => this.reverseMoves()}>{isAscending ? \"Descending\" : \"Ascending\"}</button>\n          <ol className=\"move-list\">{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\n\nimport Game from './containers/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game size={5} />\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}